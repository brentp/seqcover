import argparse
import strformat
import sequtils
import tables
import os
import d4
import ./seqcoverpkg/utils

proc get_pctile(path:string): int =
  let parts = path.split("_")
  if parts.len == 0:
    raise newException(OSError, &"[seqcover] path {path} doesn't have expected naming. use files generated by seqcover background")
  let last = parts[^1].split(".")[0]
  if last[0] != 'p':
    raise newException(OSError, &"[seqcover] path {path} doesn't have expected naming. use files generated by seqcover background")
  return parseInt(last[1..last.high])


proc read_backgrounds(dir:string): TableRef[int, D4] =
  if dir == "": return
  result = newTable[int, D4]()
  if not existsDir(dir):
    raise newException(OSError, "[seqcover] directory {dir} not found")
  for path in (&"{dir}/seqcover_*.d4").walkFiles:
    var d:D4
    if not d.open(path):
      quit &"error reading {path}"
    result[get_pctile(path)] = d

  if result.len == 0:
    var msg = &"[seqcover] no background d4 files found in {dir}"
    raise newException(OSError, msg)
  stderr.write_line &"[seqcover] read {result.len} background percentiles"

proc main() =
  let p = newParser("seqcover report"):
    option("--server-port", default="", help="optional port on which to start local server for interactive viewing")
    option("--backgrounds", default="", help="optional directory created with seqcover background")
    option("--genes", default="", help="comma-delimited list of genes for initial report")
    arg("samples", nargs= -1, help="d4 files or a glob of d4 files")

  var argv = commandLineParams()
  if len(argv) > 0 and argv[0] == "report":
    argv = argv[1..argv.high]
  if len(argv) == 0:
    argv.add("--help")

  var opts = p.parse(argv)
  if opts.help:
    quit 0

  var backgrounds = read_backgrounds(opts.backgrounds)
  var sample_d4s = read_dps(opts.samples)
  stderr.write_line &"[seqcover] read {sample_d4s.len} sample coverage files"

when isMainModule:
  main()
